import { createAction, props } from '@ngrx/store'

// simple createAction

const action = createAction('customers load')
                            ~~~~~~~~~~~~~~~~                          [action-hygiene]

const action = createAction(
  '[Customers]: load'
  ~~~~~~~~~~~~~~~~~~~                       [action-hygiene]
)

const action = createAction('[Customers] load')

// props createAction

const action = createAction('customers load', props<{ page: number }>())
                            ~~~~~~~~~~~~~~~~                          [action-hygiene]

const action = createAction(
  '[Customers]: load', 
  ~~~~~~~~~~~~~~~~~~~                       [action-hygiene]
  props<{ page: number }>
)

const action = createAction('[Customers] load', props<{ page: number }>())

// function createAction

const action = createAction('customers load', ( page: number ) => ({ page }))
                            ~~~~~~~~~~~~~~~~                          [action-hygiene]

const action = createAction(
  '[Customers]: load', 
  ~~~~~~~~~~~~~~~~~~~                       [action-hygiene]
  ( page: number ) => ({ page })
)

const action = createAction('[Customers] load', ( page: number ) => ({ page }))


// https://github.com/timdeschryver/ngrx-tslint-rules/issues/22
describe("application reducers", () => {
  describe("appInit reducers", () => {
    it("should return the initial state", () => {
      let newState = initializationStateReducer(undefined, createAction("[App Tests] Init"));
      expect(newState).toEqual(appInitInitialState);

      newState = initializationStateReducer(undefined, initializeApplication);
      expect(newState).toEqual(appInitInitialState);
    });
  });
});

[action-hygiene]: Action type does not follow the good action hygiene practice, use "[Source] Event" to define action types
